@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PraktikumsAufgabe.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
				<InputText @bind-Value="Input.Vorname" class="form-control" placeholder="user.Vorname" />
				<label for="vorname" class="form-label">Vorname</label>
            </div>
            <div class="form-floating mb-3">
				<InputText @bind-Value="Input.Nachname" class="form-control" placeholder="user.Nachname" />
				<label for="nachname" class="form-label">Nachname</label>
			</div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? Vorname => user?.Vorname;
    private string? Nachname => user?.Nachname;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        var currentUser = await UserAccessor.GetRequiredUserAsync(HttpContext);
        bool hasChanged = false;
        if (Input.Vorname != user.Vorname)
        {
            user.Vorname = Input.Vorname;
			hasChanged = true;
		}
        if (Input.Nachname != user.Nachname)
        {
            user.Nachname = Input.Nachname;
			hasChanged = true;
		}
        if (hasChanged)
        {
            var updateResult = await UserManager.UpdateAsync(currentUser);
            if (!updateResult.Succeeded)
            {
                return;
            }
            await SignInManager.RefreshSignInAsync(currentUser);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }
        else
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Nothing changed.", HttpContext);
        }
    }

    private sealed class InputModel
    {

		[Display(Name = "Vorname")]
		public string? Vorname { get; set; }

		[Display(Name = "Nachname")]
		public string? Nachname { get; set; }
    }
}
